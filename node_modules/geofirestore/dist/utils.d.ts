import { GeoFirestoreTypes } from './GeoFirestoreTypes';
export declare const BASE32 = "0123456789bcdefghjkmnpqrstuvwxyz";
export declare const BITS_PER_CHAR = 5;
export declare const E2 = 0.00669447819799;
export declare const EARTH_EQ_RADIUS = 6378137;
export declare const EARTH_MERI_CIRCUMFERENCE = 40007860;
export declare const EPSILON = 1e-12;
export declare const GEOHASH_PRECISION = 10;
export declare const MAXIMUM_BITS_PRECISION: number;
export declare const METERS_PER_DEGREE_LATITUDE = 110574;
export declare function boundingBoxBits(coordinate: GeoFirestoreTypes.cloud.GeoPoint | GeoFirestoreTypes.web.GeoPoint, size: number): number;
export declare function boundingBoxCoordinates(center: GeoFirestoreTypes.cloud.GeoPoint | GeoFirestoreTypes.web.GeoPoint, radius: number): GeoFirestoreTypes.cloud.GeoPoint[] | GeoFirestoreTypes.web.GeoPoint[];
export declare function calculateDistance(location1: GeoFirestoreTypes.cloud.GeoPoint | GeoFirestoreTypes.web.GeoPoint, location2: GeoFirestoreTypes.cloud.GeoPoint | GeoFirestoreTypes.web.GeoPoint): number;
export declare function decodeGeoQueryDocumentSnapshotData(data: GeoFirestoreTypes.GeoDocumentData, center?: GeoFirestoreTypes.web.GeoPoint | GeoFirestoreTypes.cloud.GeoPoint): {
    data: () => GeoFirestoreTypes.GeoDocumentData;
    distance: number;
};
export declare function degreesToRadians(degrees: number): number;
export declare function encodeGeohash(location: GeoFirestoreTypes.cloud.GeoPoint | GeoFirestoreTypes.web.GeoPoint, precision?: number): string;
export declare function encodeGeoDocument(geopoint: GeoFirestoreTypes.cloud.GeoPoint | GeoFirestoreTypes.web.GeoPoint, geohash: string, document: GeoFirestoreTypes.DocumentData): GeoFirestoreTypes.GeoDocumentData;
export declare function sanitizeSetOptions(options: GeoFirestoreTypes.SetOptions): GeoFirestoreTypes.SetOptions;
export declare function encodeAddDocument(documentData: GeoFirestoreTypes.DocumentData, customKey?: string): GeoFirestoreTypes.GeoDocumentData;
export declare function encodeSetDocument(documentData: GeoFirestoreTypes.DocumentData, options?: GeoFirestoreTypes.SetOptions): GeoFirestoreTypes.GeoDocumentData | GeoFirestoreTypes.DocumentData;
export declare function encodeUpdateDocument(documentData: GeoFirestoreTypes.UpdateData, customKey?: string): GeoFirestoreTypes.UpdateData;
export declare function findGeoPoint(document: GeoFirestoreTypes.DocumentData, customKey?: string, flag?: boolean): GeoFirestoreTypes.web.GeoPoint | GeoFirestoreTypes.cloud.GeoPoint;
export declare function generateGeoQueryDocumentSnapshot(snapshot: GeoFirestoreTypes.web.QueryDocumentSnapshot | GeoFirestoreTypes.cloud.QueryDocumentSnapshot, center?: GeoFirestoreTypes.web.GeoPoint | GeoFirestoreTypes.cloud.GeoPoint): GeoFirestoreTypes.QueryDocumentSnapshot;
export declare function geohashQueries(center: GeoFirestoreTypes.cloud.GeoPoint | GeoFirestoreTypes.web.GeoPoint, radius: number): string[][];
export declare function geohashQuery(geohash: string, bits: number): string[];
export declare function latitudeBitsForResolution(resolution: number): number;
export declare function log2(x: number): number;
export declare function longitudeBitsForResolution(resolution: number, latitude: number): number;
export declare function metersToLongitudeDegrees(distance: number, latitude: number): number;
export declare function toGeoPoint(latitude: number, longitude: number): GeoFirestoreTypes.cloud.GeoPoint | GeoFirestoreTypes.web.GeoPoint;
export declare function validateGeoDocument(documentData: GeoFirestoreTypes.GeoDocumentData, flag?: boolean): boolean;
export declare function validateGeohash(geohash: string, flag?: boolean): boolean;
export declare function validateLimit(limit: number, flag?: boolean): boolean;
export declare function validateLocation(location: GeoFirestoreTypes.web.GeoPoint | GeoFirestoreTypes.cloud.GeoPoint, flag?: boolean): boolean;
export declare function validateQueryCriteria(newQueryCriteria: GeoFirestoreTypes.QueryCriteria, requireCenterAndRadius?: boolean): void;
export declare function wrapLongitude(longitude: number): number;
