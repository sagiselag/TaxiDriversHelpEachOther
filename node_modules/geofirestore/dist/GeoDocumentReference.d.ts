import { GeoFirestoreTypes } from './GeoFirestoreTypes';
import { GeoCollectionReference } from './GeoCollectionReference';
import { GeoDocumentSnapshot } from './GeoDocumentSnapshot';
import { GeoFirestore } from './GeoFirestore';
export declare class GeoDocumentReference {
    private _document;
    private _isWeb;
    constructor(_document: GeoFirestoreTypes.cloud.DocumentReference | GeoFirestoreTypes.web.DocumentReference);
    readonly native: GeoFirestoreTypes.cloud.DocumentReference | GeoFirestoreTypes.web.DocumentReference;
    readonly id: string;
    readonly firestore: GeoFirestore;
    readonly onSnapshot: (onNext: (snapshot: GeoDocumentSnapshot) => void, onError?: (error: Error) => void) => () => void;
    readonly parent: GeoCollectionReference;
    readonly path: string;
    collection(collectionPath: string): GeoCollectionReference;
    delete(): Promise<void>;
    get(options?: GeoFirestoreTypes.web.GetOptions): Promise<GeoDocumentSnapshot>;
    isEqual(other: GeoDocumentReference | GeoFirestoreTypes.cloud.DocumentReference | GeoFirestoreTypes.web.DocumentReference): boolean;
    set(documentData: GeoFirestoreTypes.DocumentData, options?: GeoFirestoreTypes.SetOptions): Promise<void>;
    update(data: GeoFirestoreTypes.UpdateData, customKey?: string): Promise<void>;
}
