import * as cloudfirestore from '@google-cloud/firestore';
import { firestore as webfirestore } from 'firebase/app';
import '@types/node';
export declare namespace GeoFirestoreTypes {
    interface GeoDocumentData extends DocumentData {
        g: {
            geohash: string;
            geopoint: web.GeoPoint | cloud.GeoPoint;
        };
    }
    interface DocumentData {
        [field: string]: any;
    }
    interface DocumentChange {
        doc: QueryDocumentSnapshot;
        newIndex: number;
        oldIndex: number;
        type: 'added' | 'modified' | 'removed';
    }
    interface QueryCriteria {
        center?: cloud.GeoPoint | web.GeoPoint;
        radius?: number;
        limit?: number;
    }
    interface QueryDocumentSnapshot {
        exists: boolean;
        id: string;
        data: () => GeoDocumentData | any;
        distance: number;
    }
    interface SetOptions {
        customKey?: string;
        merge?: boolean;
        mergeFields?: Array<string | cloud.FieldPath | web.FieldPath>;
    }
    type SnapshotOptions = webfirestore.SnapshotOptions;
    interface UpdateData {
        [fieldPath: string]: any;
    }
    type WhereFilterOp = '<' | '<=' | '==' | '>=' | '>' | 'array-contains' | 'in' | 'array-contains-any';
    namespace web {
        type CollectionReference = webfirestore.CollectionReference;
        type DocumentChange = webfirestore.DocumentChange;
        type DocumentReference = webfirestore.DocumentReference;
        type DocumentSnapshot = webfirestore.DocumentSnapshot;
        type Firestore = webfirestore.Firestore;
        type FieldPath = webfirestore.FieldPath;
        type GetOptions = webfirestore.GetOptions;
        type GeoPoint = webfirestore.GeoPoint;
        type Query = webfirestore.Query;
        type QueryDocumentSnapshot = webfirestore.QueryDocumentSnapshot;
        type QuerySnapshot = webfirestore.QuerySnapshot;
        type Transaction = webfirestore.Transaction;
        type WriteBatch = webfirestore.WriteBatch;
    }
    namespace cloud {
        type CollectionReference = cloudfirestore.CollectionReference;
        type DocumentChange = cloudfirestore.DocumentChange;
        type DocumentReference = cloudfirestore.DocumentReference;
        type DocumentSnapshot = cloudfirestore.DocumentSnapshot;
        type Firestore = cloudfirestore.Firestore;
        type FieldPath = cloudfirestore.FieldPath;
        type GeoPoint = cloudfirestore.GeoPoint;
        type Query = cloudfirestore.Query;
        type QueryDocumentSnapshot = cloudfirestore.QueryDocumentSnapshot;
        type QuerySnapshot = cloudfirestore.QuerySnapshot;
        type Transaction = cloudfirestore.Transaction;
        type WriteBatch = cloudfirestore.WriteBatch;
    }
}
