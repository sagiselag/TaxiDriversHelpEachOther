import { GeoFirestoreTypes } from './GeoFirestoreTypes';
import { GeoFirestore } from './GeoFirestore';
import { GeoQuerySnapshot } from './GeoQuerySnapshot';
export declare class GeoQuery {
    private _query;
    private _center;
    private _limit;
    private _radius;
    private _isWeb;
    constructor(_query: GeoFirestoreTypes.cloud.Query | GeoFirestoreTypes.web.Query, queryCriteria?: GeoFirestoreTypes.QueryCriteria);
    readonly native: GeoFirestoreTypes.cloud.Query | GeoFirestoreTypes.web.Query;
    readonly firestore: GeoFirestore;
    readonly onSnapshot: (onNext: (snapshot: GeoQuerySnapshot) => void, onError?: (error: Error) => void) => () => void;
    get(options?: GeoFirestoreTypes.web.GetOptions): Promise<GeoQuerySnapshot>;
    limit(limit: number): GeoQuery;
    near(newGeoQueryCriteria: GeoFirestoreTypes.QueryCriteria): GeoQuery;
    where(fieldPath: string | GeoFirestoreTypes.cloud.FieldPath | GeoFirestoreTypes.web.FieldPath, opStr: GeoFirestoreTypes.WhereFilterOp, value: any): GeoQuery;
    private _generateQuery;
    private readonly _queryCriteria;
    private _stringToQuery;
    private _queryToString;
}
